---
description: This describes the process you must follow for properly adding animations with GSAP
globs:
alwaysApply: false
---
# How To Add GSAP Animations

- This app uses GSAP and its plugins for all advanced animations (not simple CSS interactions)
- To properly import GSAP and register plugins, the [wc.config.ts](mdc:src/wc.config.ts) file must have gsap set to true
- This is used by the [gsap.tsx](mdc:src/providers/gsap.tsx) provider which does some important things: it imports and registers plugins, then re-exports them for use in a registered, version-synced way
- Make sure you import your gsap code from the provider, not the node modules, in order to have the registered versions.
- Always make sure you add "use client" to a component that uses GSAP

## Example

This is an example of how to use GSAP inside a component. Note a few things:
- always place animation code inside the useGSAP hook
- use refs to scope the animation code to a parent container. This allows you to avoid adding and using cumbersome classnames or data-attributes. The scoping means you can use standard selectors without affecting other elements outside the parent. This is good for readability.


``` tsx
import { useGSAP, gsap } from "@/providers/gsap"
import React, { useRef } from "react"

const sectionRef = useRef<HTMLDivElement>(null)

  useGSAP(
    () => {
      gsap.fromTo(
        "h1",
        { opacity: 0, y: 100 },
        { opacity: 1, y: 0, duration: 1, ease: "power2.inOut" }
      )
    },
    { scope: sectionRef }
  )

  ```
